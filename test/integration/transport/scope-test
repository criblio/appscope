#!/bin/bash

#set -x

ERR=0
ERRORS=

wait_for_port() {
    TIMEOUT=${2:-60}
    while ! netstat -an | grep -w ${1} >/dev/null 2>&1; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} listener"
            netstat -an | grep -w LISTEN >&2
            return
        fi
    done
    echo 1
}

wait_for_files() {
    TIMEOUT=${2:-60}
    while ! compgen -G "${1}" > /dev/null; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} files"
            ls -lRa /tmp/out >&2
            return
        fi
    done
    echo 1
}

# Start Cribl/LogStream with:
#   - AppScope TLS source on tcp:10090 (cert/key in /tmp)
#   - AppScope TCP source on tcp:10091
#   - TCP-JSON source on tcp:10070
#   - Metrics source on udp:8125
#   - Filesystem dest to /tmp/out/${source}/CriblOut-*.json (5 sec idle timeout)
# So, anything sent to the sources should appear as JSON in /tmp/out ~5 secs later.
echo
echo ===============================================================================
echo "Starting Cribl LogStream"
[ -e /tmp/appscope.key -a -e /tmp/appscope.crt ] || \
    openssl req \
    -newkey rsa:2048 -nodes -x509 -days 365 \
    -keyout /tmp/appscope.key \
    -out /tmp/appscope.crt \
    -subj '/C=US/ST=GA/L=Canton/O=AppScope/OU=IT/CN=appscope'
[ -z "$(pgrep cribl)" ] || { /opt/cribl/bin/cribl stop; sleep 5; }
[ -d /tmp/out ] && rm -rf /tmp/out
[ -d /tmp/out ] || mkdir /tmp/out
/opt/cribl/bin/cribl start


# For each of thes tests, we're waiting for the server socket to be available
# first. Then we run a `curl` command with the right settings to have events
# and/or metrics sent via the backend transport being tested. Finally, we wait
# for the files to appear in /tmp/out.

echo
echo ===============================================================================
echo "Testing Cribl/TLS Transport"
if [ "$(wait_for_port 10090)" ]; then
    rm -rf /tmp/out/appscope:in_appscope_tls
    SCOPE_CRIBL_TLS_CA_CERT_PATH=/tmp/appscope.crt \
        scope run -c tls://127.0.0.1:10090 -- curl -Lso /dev/null https://cribl.io
    if [ "$(wait_for_files "/tmp/out/appscope:in_appscope_tls/CriblOut-*.json")" ]; then
        echo "  PASSED"
    else
        echo "  FAILED - missing output files"
        ERR+=1
        ERRORS="$ERRORS Cribl/TLS"
        ls -lR /tmp/out
    fi
else
    echo "  FAILED - no listener"
    ERR+=1
    ERRORS="$ERRORS Cribl/TLS"
fi

echo
echo ===============================================================================
echo "Testing Cribl/TCP Transport"
if [ "$(wait_for_port 10091)" ]; then
    rm -rf /tmp/out/appscope:in_appscope_tcp
    scope run -c tcp://127.0.0.1:10091 -- curl -Lso /dev/null https://cribl.io
    if [ "$(wait_for_files "/tmp/out/appscope:in_appscope_tcp/CriblOut-*.json")" ]; then
        echo "  PASSED"
    else
        echo "  FAILED - missing output files"
        ERR+=1
        ERRORS="$ERRORS Cribl/TCP"
        ls -lR /tmp/out
    fi
else
    echo "  FAILED - no listener"
    ERR+=1
    ERRORS="$ERRORS Cribl/TCP"
fi

echo
echo ===============================================================================
echo "Testing Event/TCP Transport"
if [ "$(wait_for_port 10070)" ]; then
    rm -rf /tmp/out/tcpjson:in_tcp_json
    SCOPE_CRIBL_ENABLE=false scope run -e tcp://127.0.0.1:10070 -- curl -Lso /dev/null https://cribl.io
    if [ "$(wait_for_files "/tmp/out/tcpjson:in_tcp_json/CriblOut-*.json")" ]; then
        echo "  PASSED"
    else
        echo "  FAILED - missing output files"
        ERR+=1
        ERRORS="$ERRORS Event/TCP"
        ls -lR /tmp/out
    fi
else
    echo "  FAILED - no listener"
    ERR+=1
    ERRORS="$ERRORS Event/TCP"
fi

echo
echo ===============================================================================
echo "Testing Metric/UDP Transport"
if [ "$(wait_for_port 8125)" ]; then
    rm -rf /tmp/out/metrics:in_metrics:udp
    SCOPE_CRIBL_ENABLE=false scope run -m udp://127.0.0.1:8125 --metricformat statsd -- curl -Lso /dev/null https://cribl.io
    if [ "$(wait_for_files "/tmp/out/metrics:in_metrics:udp/CriblOut-*.json")" ]; then
        echo "  PASSED"
    else
        echo "  FAILED - missing output files"
        ERR+=1
        ERRORS="$ERRORS Metric/UDP"
        ls -lR /tmp/out
    fi
else
    echo "  FAILED - no listener"
    ERR+=1
    ERRORS="$ERRORS Metric/UDP"
fi

echo
echo ===============================================================================


echo
echo ===============================================================================
echo "Testing Number of Cribl/TLS Transport Connections"
PEM_FILE=/tmp/appscope.pem
rm -f $PEM_FILE
cat /tmp/appscope.key /tmp/appscope.crt >> $PEM_FILE
chmod 600 $PEM_FILE
socat OPENSSL-LISTEN:12345,reuseaddr,cert=$PEM_FILE,cafile=/tmp/appscope.crt,fork,verify=0 /dev/null &

if [ "$(wait_for_port 12345)" ]; then
    ############################################################################
    echo "When in cribl mode, verify there is only one connection when:"
    echo " 1) SCOPE_PAYLOAD_ENABLE=false"
    echo " 2) no protocols are defined"
    SCOPE_PAYLOAD_ENABLE=false \
    SCOPE_CRIBL_TLS_CA_CERT_PATH=/tmp/appscope.crt \
        scope run -c tls://127.0.0.1:12345 -- /bin/sleep 3 &
    sleep 1
    CON_COUNT=$(lsof -p `pidof sleep` | grep -c 12345)
    if (( $CON_COUNT != 1 )); then
        echo "  FAILED - expected one connection"
        ERR+=1
        ERRORS="$ERRORS CRIBL/TLS_Connections"
    else
        echo "  PASSED"
    fi
    sleep 3 # wait for the scoped sleep command to finish

    ############################################################################
    echo "When in cribl mode, verify there are two connections when:"
    echo " 1) SCOPE_PAYLOAD_ENABLE=true"
    echo " 2) no protocols are defined"
    SCOPE_PAYLOAD_ENABLE=true \
    SCOPE_CRIBL_TLS_CA_CERT_PATH=/tmp/appscope.crt \
        scope run -c tls://127.0.0.1:12345 -- /bin/sleep 3 &
    sleep 1
    CON_COUNT=$(lsof -p `pidof sleep` | grep -c 12345)
    if (( $CON_COUNT != 2 )); then
        echo "  FAILED - expected two connections"
        ERR+=1
        ERRORS="$ERRORS CRIBL/TLS_Connections"
    else
        echo "  PASSED"
    fi
    sleep 3 # wait for the scoped sleep command to finish

    ############################################################################
    echo "When in cribl mode, verify there are two connections when:"
    echo " 1) SCOPE_PAYLOAD_ENABLE=false"
    echo " 2) a protocol has set payload: true"

    # I'm switching to controlling things with a config file just
    # because the scope cli doesn't have a way to specify protocol
    # definitions today.  I'm not intending to change any settings
    # except to add a protocol definition that has "payload: true".
    CFG_FILE=/tmp/scope.yml
    echo "payload:" >> $CFG_FILE
    echo "  enable: false" >> $CFG_FILE
    echo "cribl:" >> $CFG_FILE
    echo "  enable: true" >> $CFG_FILE
    echo "  transport:" >> $CFG_FILE
    echo "    type: tcp" >> $CFG_FILE
    echo "    host: 127.0.0.1" >> $CFG_FILE
    echo "    port: 12345" >> $CFG_FILE
    echo "    tls:" >> $CFG_FILE
    echo "      enable: true" >> $CFG_FILE
    echo "      validateserver: true" >> $CFG_FILE
    echo "      cacertpath: '/tmp/appscope.crt'" >> $CFG_FILE
    echo "protocol:" >> $CFG_FILE
    echo "  - name: Redis" >> $CFG_FILE
    echo "    regex: .*" >> $CFG_FILE
    echo "    payload: true" >> $CFG_FILE

    scope run -u $CFG_FILE -- /bin/sleep 3 &
    sleep 1
    CON_COUNT=$(lsof -p `pidof sleep` | grep -c 12345)
    if (( $CON_COUNT != 2 )); then
        echo "  FAILED - expected two connections"
        ERR+=1
        ERRORS="$ERRORS CRIBL/TLS_Connections"
    else
        echo "  PASSED"
    fi
    sleep 3 # wait for the scoped sleep command to finish

    ############################################################################
    # Clean up, but don't treat any issues here as test failures
    if ! rm -f $PEM_FILE; then
        echo "unable to remove $PEM_FILE during cleanup"
    fi
    if ! kill `pidof socat`; then
        echo "unable to kill socat process during cleanup"
    fi
    if ! rm -f $CFG_FILE; then
        echo "unable to remove $CFG_FILE during cleanup"
    fi

else
    echo "  FAILED - no listener"
    ERR+=1
    ERRORS="$ERRORS Cribl/TLS_Connections"
fi



echo
echo ===============================================================================


if [ -n "$ERRORS" ]; then
    echo >&2 "$ERR test failed; $ERRORS"
else
    echo "All tests passed"
fi
exit $ERR
