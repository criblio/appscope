#
# AppScope - Update Latest Release Workflow
#
# Update what is returned by https://cdn.cribl.io/dl/scope/latest-release
#
# based on:
#   https://levelup.gitconnected.com/how-to-manually-trigger-a-github-actions-workflow-4712542f1960
# instructions for use:
#   https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
#
name: Update Latest Release
on:
  workflow_dispatch:

jobs:
  info:
    name: Validate Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get Tag
        id: tag
        run: |
          if [ -z "${GITHUB_REF%%refs/tags/v*}" -a "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              echo "tag=${{ steps.version.outputs.version-without-v }}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Echo Outputs
        run: |
          echo "version=\"${{ steps.version.outputs.version }}\""
          echo "major=\"${{ steps.version.outputs.major }}\""
          echo "minor=\"${{ steps.version.outputs.minor }}\""
          echo "maintenance=\"${{ steps.version.outputs.patch }}\""
          echo "prerelease=\"${{ steps.version.outputs.prerelease }}\""
          echo "build=\"${{ steps.version.outputs.build }}\""
          echo "is-semver=\"${{ steps.version.outputs.is-semver }}\""
          echo "tag=\"${{ steps.tag.outputs.tag }}\""

      - name: Check Tag
        run: |
          if [ "${{ steps.tag.outputs.tag }}" == '' ]; then
              echo "The git version ${{ steps.version.outputs.version }} is not usable..."
              echo "  It must start with a v, and be a valid semantic version"
              exit 1
          fi
          if [ "${{ steps.version.outputs.prerelease }}" != '' ]; then
              echo "The git version ${{ steps.version.outputs.version }} is not usable..."
              echo "  It must not be a prerelease"
              exit 1
          fi

    outputs:
      prerelease: ${{ steps.version.outputs.prerelease }}
      tag: ${{ steps.tag.outputs.tag }}

  update-cdn-latest-release:
    name: Update CDN Latest Release
    runs-on: ubuntu-latest
    needs: info
    steps:
      - name: Update dl/scope/latest-release
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Updating https://cdn.cribl.io/dl/scope/latest-release to ${{ needs.info.outputs.tag }}"
          S3_SCOPE=s3://io.cribl.cdn/dl/scope
          TMPDIR=${RUNNER_TEMP}

          if [ -n "${{ needs.info.outputs.tag }}" ]; then
            echo "${{ needs.info.outputs.tag }}" > ${TMPDIR}/latest-release
            aws s3 cp ${TMPDIR}/latest-release ${S3_SCOPE}/latest-release
            aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths '/dl/scope/latest-release'
          fi
          echo "::endgroup::"

