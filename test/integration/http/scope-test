#!/bin/bash

#set -x

# This is the URL for a file on a server that supports various HTTP/1.x and
# HTTP/2 requests. We found it in the tests for WireShark.
URL=http://nghttp2.org/robots.txt
URL_HTTPS=https://nghttp2.org/robots.txt

# LogStream will be configured to dump NDJSON output files here.
DEST=/tmp/out/appscope:in_appscope

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

starttest(){
    CURRENT_TEST=$1
    echo "=============================================="
    echo "         Testing $CURRENT_TEST"
    echo "=============================================="
    ERR=0
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "******************* $RESULT *******************"
    echo ""
    echo ""
}

wait_for_port() {
    TIMEOUT=${2:-60}
    while ! netstat -an | grep -w ${1} >/dev/null 2>&1; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} listener"
            netstat -an | grep -w LISTEN >&2
            return
        fi
    done
    echo 1
}

wait_for_files() {
    TIMEOUT=${2:-60}
    while ! compgen -G "${1}" > /dev/null; do
        sleep 1
        ((TIMEOUT=TIMEOUT-1))
        if [ $TIMEOUT -le 0 ]; then
            echo >&2 "warn: timed out waiting for port ${1} files"
            ls -lRa /tmp/out >&2
            return
        fi
    done
    echo 1
}

# Start LogStream
[ -z "$(pgrep cribl)" ] || { /opt/cribl/bin/cribl stop; sleep 5; }
[ -d /tmp/out ] && rm -rf /tmp/out
[ -d /tmp/out ] || mkdir /tmp/out
/opt/cribl/bin/cribl start
if [ ! "$(wait_for_port 10090)" ]; then
    echo >&2 "error: LogStream failed to start; aborting test"
    exit 1
fi

# Each of these testst are running scoped curl connected to the local LogStream's
# AppScope source. Logstream is setup to dump data sent to that source to NDJSON
# files in ${DEST} named CriblOut-*.json.

# When AppScope is configured to connect to LogStream, it should automatically
# relay HTTP payloads and LogStream should be able to parse them into HTTP
# request and response events.

# Should get HTTP events from HTTP/1.x traffic
starttest "HTTP/1.1"
rm -rf ${DEST}
scope run -c tcp://localhost:10090 -- curl -Lso /dev/null --http1.1 $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Should still work when ALL payloads are enabled.
starttest "HTTP/1.1 + Payloads"
rm -rf ${DEST}
scope run -p -c tcp://localhost:10090 -- curl -Lso /dev/null --http1.1 $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Should get HTTP events from HTTP/2 traffic
starttest "HTTP/2"
rm -rf ${DEST}
scope run -c tcp://localhost:10090 -- curl -Lso /dev/null --http2-prior-knowledge $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Should still work when ALL payloads are enabled.
starttest "HTTP/2 + Payloads"
rm -rf ${DEST}
scope run -p -c tcp://localhost:10090 -- curl -Lso /dev/null --http2-prior-knowledge $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# The HTTP entry in /opt/test/conf_1/scope.yml has payload:false which should
# override the logic that automatically enables HTTP payloads when we're
# connected to LogStream.
starttest "HTTP/2, payload:false"
rm -rf ${DEST}
SCOPE_HOME=/opt/test/conf_1 \
LD_PRELOAD=/usr/local/scope/lib/libscope.so \
curl -Lso /dev/null --http2-prior-knowledge $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "FAIL: http-req found"
        ERR+=1
    else
        echo "PASS: http-req not found"
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "FAIL: http-resp found"
        ERR+=1
    else
        echo "PASS: http-resp not found"
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# The HTTP entry in /opt/test/conf_2/scope.yml has an alternative RegEx that
# won't match HTTP.
starttest "HTTP/2, busted regex"
rm -rf ${DEST}
SCOPE_HOME=/opt/test/conf_2 \
LD_PRELOAD=/usr/local/scope/lib/libscope.so \
curl -Lso /dev/null --http2-prior-knowledge $URL
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "FAIL: http-req found"
        ERR+=1
    else
        echo "PASS: http-req not found"
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "FAIL: http-resp found"
        ERR+=1
    else
        echo "PASS: http-resp not found"
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Should get HTTP events from HTTP/1.x traffic via HTTPS
starttest "HTTP/1.1 + HTTPS"
rm -rf ${DEST}
scope run -c tcp://localhost:10090 -- curl -Lso /dev/null --http1.1 $URL_HTTPS
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Should get HTTP events from HTTP/2 traffic via HTTPS
starttest "HTTP/2 + HTTPS"
rm -rf ${DEST}
scope run -c tcp://localhost:10090 -- curl -Lso /dev/null --http2-prior-knowledge $URL_HTTPS
if [ "$(wait_for_files "${DEST}/CriblOut-*.json")" ]; then
    if grep '"source":"http-req"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-req found"
    else
        echo "FAIL: http-req not found"
        ERR+=1
    fi
    if grep '"source":"http-resp"' ${DEST}/CriblOut-*.json >/dev/null; then
        echo "PASS: http-resp found"
    else
        echo "FAIL: http-resp not found"
        ERR+=1
    fi
else
    echo "FAIL: no output files"
    ERR+=1
fi
endtest

# Results
echo ""
if (( $FAILED_TEST_COUNT == 0 )); then
    echo "************ ALL HTTP TESTS PASSED ************"
else
    echo "************ $FAILED_TEST_COUNT HTTP TESTS FAILED ************"
    echo "Failed tests: $FAILED_TEST_LIST"
fi
echo ""

exit ${FAILED_TEST_COUNT}
