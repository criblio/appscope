#!/bin/bash

# Check that the test was setup correctly
# (mem/bash is built normally, nomem/bash with --without-bash-malloc)
echo "Checking to see if /mybin/mem/bash defines malloc as expected."
if ! nm /mybin/mem/bash | grep " T malloc$"; then
    echo "/mybin/mem/bash was not built as expected. Test setup failed."
    exit 1
fi

echo "Checking to see if /mybin/nomem/bash has external dependency on malloc as expected."
if ! nm /mybin/nomem/bash | grep " U malloc"; then
    echo "/mybin/nomem/bash was not built as expected.  Test setup failed."
    exit 1
fi

echo "All preconditions were successful."
echo ""



# The real test here is that this script doesn't crash.  We're setting
# SCOPE_SUMMARY_PERIOD to a small value to get as much activity on our
# thread as we can to make the chance of a memory-related crash as much
# as possible.  This should catch if we were not able to swap out bash's
# thread-unsafe built-in memory subsystem for a thread-safe one (glibc).
#
# Here's an example of what a crash might look like...
# bash_1             | malloc: unknown:0: assertion botched
# bash_1             | malloc: block on free list clobbered
# bash_1             | Aborting.../mybin/mem/bash ./runbashmem.sh failed

echo "Executing /mybin/mem/bash ./runbashmem.sh"
export SCOPE_SUMMARY_PERIOD=1
LD_PRELOAD=/usr/local/scope/lib/libscope.so /mybin/mem/bash /mybin/runbashmem.sh
if [ $? -ne 0 ]; then
    echo "/mybin/mem/bash ./runbashmem.sh failed"
    exit 1
fi
echo "/mybin/mem/bash ./runbashmem.sh passed"
echo ""



# This isn't expected to be a very meaningful test, but it can be used
# to look at a bash that is built without it's own memory subsystem in
# case there are problems above.

echo "Executing /mybin/nomem/bash ./runbashnomem.sh"
LD_PRELOAD=/usr/local/scope/lib/libscope.so /mybin/nomem/bash /mybin/runbashnomem.sh
if [ $? -ne 0 ]; then
    echo "/mybin/nomem/bash ./runbashnomem.sh failed"
    exit 1
fi
echo "/mybin/nomem/bash ./runbashnomem.sh passed"
echo ""

echo "All bash tests passed"
exit 0
