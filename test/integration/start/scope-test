#! /bin/bash
DEBUG=0  # set this to 1 to capture the EVT_FILE for each test

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

SCOPE_VERSION_TYPE="dev"

fail() { ERR+=1; echo >&2 "fail:" $@; }

starttest(){
    CURRENT_TEST=$1
    echo "==============================================="
    echo "             Testing $CURRENT_TEST             "
    echo "==============================================="
    ERR=0
}

evaltest(){
    echo "             Evaluating $CURRENT_TEST"
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "*************** $CURRENT_TEST $RESULT ***************"
    echo ""
    echo ""
}

cleanupAfterStart() {
if [ -f "/etc/profile.d/scope.sh" ] ; then
    rm "/etc/profile.d/scope.sh"
fi

if [ -d "/usr/lib/appscope" ] ; then
    rm -r "/usr/lib/appscope"
fi

if [ -d "/tmp/appscope" ] ; then
    rm -r "/tmp/appscope"
fi
}

# Identify if version used in this test is official or not
# based on IsVersionDev method -> version.go
SCOPE_VERSION=$(scope version --summary)
SCOPE_TAG=$(scope version --tag)
if [ "${SCOPE_VERSION:1}" = "$SCOPE_TAG" ]; then
    SCOPE_VERSION_TYPE="official"
    echo "INFO: Scope version $SCOPE_VERSION will be tested as an official version."
else
    echo "INFO: Scope version $SCOPE_VERSION will be tested as a developer version."
fi

#
# scope start
#

starttest scope_start_basic

# Star processses
memcached -u root &
redis-server &
nginx &

cd /opt/
scope start -f < /opt/test-runner/scope_filter1.yml
if [ $? -ne "0" ]; then
    fail "scope start failed"
fi

LIBSCOPE_PATH=$(find /usr/lib/appscope/ -name libscope.so)

# check if filter file is placed in known location
if [ ! -f /usr/lib/appscope/scope_filter ]; then
    fail "missing /usr/lib/appscope/scope_filter"
fi

# compare the filter file
cmp -s /usr/lib/appscope/scope_filter /opt/test-runner/scope_filter1.yml
if [ $? -ne "0" ]; then
    fail "mismatch /usr/lib/appscope/scope_filter and scope_filter1.yml"
fi

# check if libscope.so is placed in known location
if [ ! -f $LIBSCOPE_PATH ]; then
    fail "missing $LIBSCOPE_PATH"
fi

# check if etc/profile.d was update for official version and not in case of dev version
if [ $SCOPE_VERSION_TYPE = "official" ]; then
    if [ ! -f /etc/profile.d/scope.sh ]; then
        fail "missing /etc/profile.d/scope.sh for official version"
    fi

    # check the content of etc/profile.d/scope.sh
    count=$(grep "$LIBSCOPE_PATH" "/etc/profile.d/scope.sh" | wc -l)
    if [ $count -ne 2 ] ; then
        fail "missing $LIBSCOPE_PATH in /etc/profile.d/scope.sh"
    fi
else
    if [ -f /etc/profile.d/scope.sh ]; then
        fail "/etc/profile.d/scope.sh should not be present by default for dev version"
    fi
fi

curl localhost:80
# Dummy sleep to ensure that data will be in the file
sleep 2

# check if redis-server was properly scoped
if [ ! -f /tmp/redis_events.log ]; then
    fail "missing /tmp/redis_events.log"
fi

# check the content of redis_events.log
grep -q '"cmd":"redis-server' "/tmp/redis_events.log"
if [ $? -ne "0" ]; then
    fail "missing redis-server cmd in /tmp/redis_events.log"
fi

if [ ! -f /tmp/redis_metrics.log ]; then
    fail "missing /tmp/redis_metrics.log"
fi

if [ ! -f /tmp/redis_scope.log ]; then
    fail "missing /tmp/redis_scope.log"
fi

# check if nginx was properly scoped
if [ ! -f /tmp/nginx_events.log ]; then
    fail "missing /tmp/nginx_events.log"
fi

grep -q '"cmd":"nginx: worker process"' "/tmp/nginx_events.log"
if [ $? -ne "0" ]; then
    fail "missing nginx: worker process cmd in /tmp/nginx_events.log"
fi

if [ ! -f /tmp/nginx_metrics.log ]; then
    fail "missing /tmp/nginx_metrics.log"
fi

if [ ! -f /tmp/nginx_scope.log ]; then
    fail "missing /tmp/nginx_scope.log"
fi

scope start -f < /opt/test-runner/scope_filter2.yml
if [ $? -ne "0" ]; then
    fail "scope start failed"
fi

# compare the filter file it should be overwritten
cmp -s /usr/lib/appscope/scope_filter /opt/test-runner/scope_filter2.yml
if [ $? -ne "0" ]; then
    fail "mismatch /usr/lib/appscope/scope_filter and scope_filter2.yml"
fi

cleanupAfterStart
pkill -9 memcached
pkill -9 redis-server &
pkill -9 nginx &

sleep 3

endtest

starttest scope_start_dev_env_force_setup_profile

if [ $SCOPE_VERSION_TYPE = "dev" ]; then
    SCOPE_START_FORCE_PROFILE=1 scope start -f < /opt/test-runner/scope_filter1.yml
    if [ $? -ne "0" ]; then
        fail "scope start failed"
    fi
    SCOPE_LIB_DEV_PATH="/usr/lib/appscope/dev/libscope.so"

    if [ ! -f $SCOPE_LIB_DEV_PATH ]; then
        fail "missing $SCOPE_LIB_DEV_PATH for SCOPE_START_FORCE_PROFILE"
    fi

    if [ ! -f /etc/profile.d/scope.sh ]; then
        fail "/etc/profile.d/scope.sh should be created when SCOPE_START_FORCE_PROFILE was used"
    fi

    # check the content of etc/profile.d/scope.sh
    # Should be two entries first one for check second one for setup LD_PRELOAD
    count=$(grep "$SCOPE_LIB_DEV_PATH" "/etc/profile.d/scope.sh" | wc -l)
    if [ $count -ne 2 ] ; then
        fail "missing $SCOPE_LIB_DEV_PATH in /etc/profile.d/scope.sh for SCOPE_START_FORCE_PROFILE"
    fi
else
    echo "INFO: Skip $CURRENT_TEST for the official version"
fi
cleanupAfterStart

endtest

starttest scope_start_official_env_skip_setup_profile

if [ $SCOPE_VERSION_TYPE = "official" ]; then
    SCOPE_START_NOPROFILE=1 scope start -f < /opt/test-runner/scope_filter1.yml
    if [ $? -ne "0" ]; then
        fail "scope start failed"
    fi
    if [ -f /etc/profile.d/scope.sh ]; then
        fail "/etc/profile.d/scope.sh should not be created when SCOPE_START_NOPROFILE was used"
    fi
else
    echo "INFO: Skip $CURRENT_TEST test for the dev version"
fi

cleanupAfterStart

endtest



if (( $FAILED_TEST_COUNT == 0 )); then
    echo ""
    echo ""
    echo "*************** ALL TESTS PASSED ***************"
else
    echo "*************** SOME TESTS FAILED ***************"
    echo "Failed tests: $FAILED_TEST_LIST"
    echo "Refer to these files for more info:"
    for FAILED_TEST in $FAILED_TEST_LIST; do
        echo "  $EVT_FILE.$FAILED_TEST"
    done
fi

exit ${FAILED_TEST_COUNT}
